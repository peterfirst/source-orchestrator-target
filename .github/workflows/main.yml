name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Linting
        run: npm run lint

      - name: Type checking
        run: npm run typecheck

      - name: Unit testing
        run: npm run test

      - name: Build
        run: npm run build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist
  
  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.8"
      - name: Terraform Init
        id: init
        working-directory: ./terraform
        env:
          TF_BACKEND_CONFIG_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
          TF_BACKEND_CONFIG_key: ${{ secrets.TERRAFORM_STATE_KEY }}
          TF_BACKEND_CONFIG_region: ${{ secrets.AWS_REGION }}
          TF_BACKEND_CONFIG_dynamodb_table: ${{ secrets.DYNAMODB_TABLE }}
          TF_BACKEND_CONFIG_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_BACKEND_CONFIG_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        env:
          TF_VAR_name_prefix: "chalhoub"
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_lambda_runtime: "nodejs20.x"
          TF_VAR_lambda_layer_description: "Node.js modules layer"
          TF_VAR_lambda_memory_size: 256
          TF_VAR_lambda_timeout: 30
          TF_VAR_lamda_dispatcher_name: "dispatcher"
          TF_VAR_lambda_processor_name: "processor"
          TF_VAR_lambda_health_name: "health"
          TF_VAR_target_graphql_url: ${{ secrets.TARGET_GRAPHQL_URL }}
        run: terraform plan -no-color -out=tfplan

      - name: Terraform Plan Summary
        id: plan-summary
        working-directory: ./terraform
        run: terraform show -no-color tfplan        

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: terraform apply --auto-aprove -no-color tfplan
